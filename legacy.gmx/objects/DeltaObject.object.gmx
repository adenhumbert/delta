<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d_speed = 0;
d_hspeed = 0;
d_vspeed = 0;
__d_speed_last = 0;
__d_hspeed_last = 0;
__d_vspeed_last = 0;
d_image_speed = 0;
d_alarm = undefined;
d_friction = 0;
d_gravity = 0;
for (var i = 12; i &gt; 0; i--) {
    d_alarm[i] = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Break down speed into a vector
var spd_hvec = lengthdir_x(d_speed, direction);
var spd_vvec = lengthdir_y(d_speed, direction);

// If hspeed or vspeed changed, update accordingly
if (d_hspeed != __d_hspeed_last || d_vspeed != __d_vspeed_last) {
    spd_hvec = d_hspeed;
    spd_vvec = d_vspeed;
}

// Apply gravity
if (d_gravity != 0) {
    var grav_hvec = lengthdir_x(d(d_gravity), gravity_direction);
    var grav_vvec = lengthdir_y(d(d_gravity), gravity_direction);
    spd_hvec += grav_hvec;
    spd_vvec += grav_vvec;
}

// Recombine speed and direction
direction = point_direction(0, 0, spd_hvec, spd_vvec);
d_speed = point_distance(0, 0, spd_hvec, spd_vvec);
d_hspeed = spd_hvec;
d_vspeed = spd_vvec;
__d_hspeed_last = spd_hvec;
__d_vspeed_last = spd_vvec;

// Apply friction
if (d_friction != 0) {
    if (d_speed &gt; 0) {
        d_speed = max(0, d_speed - d(d_friction));
    } else if (d_speed &lt; 0) {
        d_speed = min(d_speed + d(d_friction), 0);
    }
}

// Apply properties
var __d_stepFactor = d(1);
speed = __d_stepFactor * d_speed;
image_speed = __d_stepFactor * d_image_speed;

// Tick alarms
for (var i = 0; i &lt; 12; i++) {
    if (d_alarm[i] &gt; 0) {
        d_alarm[i] -= __d_stepFactor;
        if (d_alarm[i] &lt;= 0) {
            d_alarm[i] = 0;
            event_perform(ev_alarm, i);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
